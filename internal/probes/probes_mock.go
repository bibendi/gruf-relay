// Code generated by MockGen. DO NOT EDIT.
// Source: probes.go
//
// Generated by this command:
//
//	mockgen -source=probes.go -destination=probes_mock.go -package=probes
//

// Package probes is a generated GoMock package.
package probes

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	connectivity "google.golang.org/grpc/connectivity"
)

// MockHealthChecker is a mock of HealthChecker interface.
type MockHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckerMockRecorder
	isgomock struct{}
}

// MockHealthCheckerMockRecorder is the mock recorder for MockHealthChecker.
type MockHealthCheckerMockRecorder struct {
	mock *MockHealthChecker
}

// NewMockHealthChecker creates a new mock instance.
func NewMockHealthChecker(ctrl *gomock.Controller) *MockHealthChecker {
	mock := &MockHealthChecker{ctrl: ctrl}
	mock.recorder = &MockHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthChecker) EXPECT() *MockHealthCheckerMockRecorder {
	return m.recorder
}

// GetServerState mocks base method.
func (m *MockHealthChecker) GetServerState(name string) connectivity.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerState", name)
	ret0, _ := ret[0].(connectivity.State)
	return ret0
}

// GetServerState indicates an expected call of GetServerState.
func (mr *MockHealthCheckerMockRecorder) GetServerState(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerState", reflect.TypeOf((*MockHealthChecker)(nil).GetServerState), name)
}

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GetWorkerNames mocks base method.
func (m *MockManager) GetWorkerNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetWorkerNames indicates an expected call of GetWorkerNames.
func (mr *MockManagerMockRecorder) GetWorkerNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerNames", reflect.TypeOf((*MockManager)(nil).GetWorkerNames))
}
